import colorsys
import glob
import os
import random

import matplotlib.pyplot as plt
import numpy as np
from PIL import Image, ImageOps
import torch
from torch import nn
from torch.utils.data import Dataset, DataLoader

from main import generate_input_images, FOLDER_ROOT, FOLDER_TRAIN_INPUTS, FOLDER_TRAIN_OUTPUTS, OUTPUT_SIZE


# Dataset size.
NUMBER_SAMPLES = 20
# Load magnitude.
LOAD = 50000
# Minimum and maximum values of parameters to be varied.
ANGLE_RANGE = (0, 90)
# Increments used to generate samples within the above ranges.
ANGLE_STEP = 3

# Name of text file to contain samples.
FILENAME_TEXT = 'cantilever_samples.txt'

# Return randomly generated sample values for load magnitudes and angles and write them to a text file.
def generate_samples():
    # Generate equally spaced values within the corresponding range, using the specified increments.
    angle_samples = np.arange(ANGLE_RANGE[0], ANGLE_RANGE[1], ANGLE_STEP)
    # Randomize the ordering of the samples.
    random.shuffle(angle_samples)
    # Keep only the first N samples.
    angle_samples = angle_samples[:NUMBER_SAMPLES]
    
    # Determine the x and y components of the load for easier entry in FEA.
    load_samples = []
    for angle in angle_samples:
        angle *= (np.pi / 180)
        load_samples.append((
            np.cos(angle) * LOAD,
            np.sin(angle) * LOAD,
            ))
    # Write samples to text file.
    text = [f'X load: {load[0]:.2f},  Y load: {load[1]:.2f},  Angle: {angle}\n' for load, angle in zip(load_samples, angle_samples)]
    with open(os.path.join(FOLDER_ROOT, FILENAME_TEXT), 'w') as file:
        file.writelines(text)
    print(f'Generated samples and wrote them in {FILENAME_TEXT}.')
    return angle_samples

# Return the sample values found in the text file previously generated.
def read_samples():
    angle_samples = []
    filename = os.path.join(FOLDER_ROOT, FILENAME_TEXT)
    try:
        with open(filename, 'r') as file:
            for string in file.readlines():
                *_, angle = [int(float(string.split(':')[1])) for string in string.split(',')]
                angle_samples.append(angle)
        print(f'Found samples in {filename}.')
    except FileNotFoundError:
        print(f'"{filename}" not found.')
    return angle_samples

# Crop and resize the stress contour images.
def crop_output_images():
    # LEFT, TOP = 209, 108
    # SIZE = (616, 155)
    filenames = glob.glob(os.path.join(FOLDER_TRAIN_OUTPUTS, '*.png'))
    for filename in filenames:
        with Image.open(filename) as image:
            # if image.size[0] > SIZE[0] and image.size[1] > SIZE[1]:
            #     image = image.crop((LEFT, TOP, LEFT+SIZE[0]-1, TOP+SIZE[1]-1))
            image_copy = image.convert('L')
            area = ImageOps.invert(image_copy).getbbox()
            image = image.crop(area)
            image = image.resize(OUTPUT_SIZE)
            image.save(filename)

# Try to read sample values from the text file if it already exists. If not, generate the samples.
angle_samples = read_samples()
if not angle_samples:
    angle_samples = generate_samples()
generate_input_images(angle_samples, FOLDER_TRAIN_INPUTS)

# Crop and resize stress contour images generated by FEA. This only needs to run the first time the images are added to the folder.
# crop_output_images()